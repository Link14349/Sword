{"version":3,"sources":["../src/index.js"],"names":["sword","type","success","error","data","url","sync","Promise","resolve","reject","ajax","toLowerCase","content","xrh","HTTPError","readyState","status","message","name","Error","dataString","txt","Math","random","i","value","escape","JSON","stringify","toString","get","s","e","xhr","XMLHttpRequest","open","onreadystatechange","responseText","send","post","setRequestHeader","define","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\n!function (sword) {\n    // 定义HTTPError类用于抛出HTTPERROR\n    class HTTPError extends Error {\n        constructor(message) {\n            super();\n            this.name = \"HTTPError: \";\n            this.message = message;\n        }\n    }\n\n    function dataString(data) {\n        let txt = \"__token=\" + Math.random();// 默认首先添加一个令牌防止浏览器缓存\n        for (let i in data) {\n            txt += \"&\" + i + \"=\";\n            let value = data[i];\n            switch (typeof value) {\n                case \"string\":\n                    txt += escape(value);\n                    break;\n                case \"object\":\n                    txt += escape(JSON.stringify(value));\n                    break;\n                case \"function\":\n                    txt += escape(value.toString());\n                    break;\n                case \"undefined\":\n                    txt += escape(\"undefined\");\n                    break;\n                default:\n                    txt += escape(value.toString());\n                    break;\n            }\n        }\n        return txt;\n    }\n    function get(url, data, s, e) {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", `${url}${(() => {\n            let txt = dataString(data);\n            if (txt != \"\") return \"?\" + txt;\n            return \"\";\n        })()}`, true);\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState == 4 && xhr.status == 200 || xhr.status == 304) {// 请求完成\n                if (s) s(xhr.responseText);\n            } else if (xhr.readyState == 4) {\n                if (e) e(xhr);\n            }\n        };\n        xhr.send();\n    }\n    function post(url, data, s, e) {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", url, true);\n        xhr.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState == 4 &&  xhr.status == 200 || xhr.status == 304) {// 请求完成\n                if (s) s(xhr.responseText);\n            } else if (xhr.readyState == 4) {\n                if (e) e(xhr);\n            }\n        };\n        xhr.send(dataString(data));\n    }\n    async function ajax({ type = \"get\", success, error, data, url, sync = false }) {\n        if (sync) {\n            return (await new Promise((resolve, reject) => {\n                ajax[type.toLowerCase()](url, data, (content) => {\n                    resolve(content);\n                }, (xrh) => {\n                    reject(new HTTPError(`HTTP request failed.\\nRequest-Type: ${type}; Request-URL: ${url}; state: ${xrh.readyState}; status: ${xrh.status}`));\n                });\n            }));\n        } else {\n            ajax[type.toLowerCase()](url, data, success, error);\n        }\n    }\n    ajax.get = get;\n    ajax.post = post;\n    sword.define(\"Ajax\", (exports) => {\n        exports({\n            get, post, ajax\n        });\n    });\n}(sword);"]}