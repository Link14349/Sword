{"version":3,"sources":["../src/control-flow.js"],"names":["JTML","compiler","$ignore","$compiler","If","tag","conditional","eval","attr","compile","next","length","localName","css","children","finish","$compilerDefine","While","conditionalContent","content","html","empty","n","String","q","$","append","DoWhile","tmp","split","tokenName","trim","tokens","value","i","scope","global","sword"],"mappings":"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","file":"control-flow.js","sourcesContent":["!function (JTML) {\n    JTML.compiler.$ignore(\"if\");\n    JTML.compiler.$ignore(\"elif\");\n    JTML.compiler.$ignore(\"else\");\n    JTML.compiler.$compiler(function If(tag) {\n        let conditional = eval(tag.attr(\"conditional\"));\n        if (conditional) {\n            JTML.compile(tag);\n            let next = tag.next();\n            while (\n                next.length > 0 &&\n                (next[0].localName == \"elif\" || next[0].localName == \"else\")\n                ) {\n                next.css(\"display\", \"none\");\n                next = next.next();\n            }\n        } else {\n            tag.children().css(\"display\", \"none\");\n            let next = tag.next();\n            let finish = false;\n            while (\n                next.length > 0 &&\n                (next[0].localName == \"elif\" || next[0].localName == \"else\")\n                ) {\n                if (next[0].localName == \"else\") {\n                    // console.log(next, finish);\n                    if (finish) {\n                        next.css(\"display\", \"none\");\n                        next = next.next();\n                        continue;\n                    }\n                    JTML.compile(next);\n                    finish = true;\n                }\n                if (next[0].localName == \"elif\") {\n                    if (finish) {\n                        next.css(\"display\", \"none\");\n                        next = next.next();\n                        continue;\n                    }\n                    let conditional = eval(next.attr(\"conditional\"));\n                    if (conditional) {\n                        JTML.compile(next);\n                        finish = true;\n                    } else {\n                        next.css(\"display\", \"none\");\n                    }\n                }\n                next = next.next();\n            }\n        }\n        // console.log(tag.next());\n    }, \"if\", false, false);\n    JTML.compiler.$compilerDefine(\"if\", \"\");\n\n    // while loop\n    JTML.compiler.$compiler(function While(tag) {\n        let conditionalContent = tag.attr(\"conditional\");\n        let content = tag.html();\n        tag.empty();\n        while (eval(conditionalContent)) {\n            // console.log(i);\n            let n = String(content);\n            let q = $(n);\n            JTML.compile(q, true);\n            tag.append(q);\n            // res += content;\n        }\n    }, \"while\", false, false);\n\n    // do...while loop\n    JTML.compiler.$compiler(function DoWhile(tag) {\n        let conditionalContent = tag.attr(\"conditional\");\n        let content = tag.html();\n        tag.empty();\n        do {\n            // console.log(i);\n            let n = String(content);\n            let q = $(n);\n            JTML.compile(q, true);\n            tag.append(q);\n            // res += content;\n        } while (eval(conditionalContent));\n    }, \"do\", false, false);\n\n    // for loop\n    // for loop must be xx in xx format\n    JTML.compiler.$compiler(function While(tag) {\n        let conditionalContent = tag.attr(\"conditional\");\n        let content = tag.html();\n        tag.empty();\n        let tmp = conditionalContent.split(\"in\");\n        let tokenName = tmp[0].trim();\n        let tokens = tokenName.split(\".\");\n        let value = tmp[1];\n        for (let i = 0; i < tokens.length; i++) {\n            tokens[i] = tokens[i].trim();\n        }\n        let scope = global;\n        for (let i = 0; i < tokens.length - 1; i++) scope = scope[tokens[i]];\n    }, \"while\", false, false);\n}(sword.JTML);"]}