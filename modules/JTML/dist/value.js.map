{"version":3,"sources":["../src/value.js"],"names":["JTML","compiler","$compiler","set","tag","tags","children","tokenName","value","gotName","gotValue","i","tokens","split","tmp","global","length","localName","$","text","t","eval","show","v","e","console","error","Error","sword"],"mappings":";;AAAA,CAAC,UAAUA,IAAV,EAAgB;AACbA,SAAKC,QAAL,CAAcC,SAAd,CAAwB,SAASC,GAAT,CAAaC,GAAb,EAAkB;AACtC,YAAIC,OAAOD,IAAIE,QAAJ,EAAX;AACA,YAAIC,YAAY,EAAhB;AAAA,YAAoBC,QAAQ,IAA5B;AACA,YAAIC,UAAU,KAAd;AAAA,YAAqBC,WAAW,KAAhC;AACA,YAAIC,UAAJ;AACA,iBAASR,GAAT,GAAe;AACX,gBAAIS,SAASL,UAAUM,KAAV,CAAgB,GAAhB,CAAb;AACA,gBAAIC,MAAMC,MAAV;AACA,iBAAK,IAAIJ,KAAI,CAAb,EAAgBA,KAAIC,OAAOI,MAAP,GAAgB,CAApC,EAAuCL,IAAvC,EAA4C;AACxCG,sBAAMA,IAAIF,OAAOD,EAAP,CAAJ,CAAN;AACH;AACDG,gBAAIF,OAAOA,OAAOI,MAAP,GAAgB,CAAvB,CAAJ,IAAiCR,KAAjC;AACAE,uBAAW,KAAX;AACAD,sBAAU,KAAV;AACH;AACD,aAAKE,IAAI,CAAT,EAAYA,IAAIN,KAAKW,MAArB,EAA6BL,GAA7B,EAAkC;AAC9B,gBAAIN,KAAKM,CAAL,EAAQM,SAAR,IAAqB,OAAzB,EAAkC;AAC9BV,4BAAYW,EAAEb,KAAKM,CAAL,CAAF,EAAWQ,IAAX,EAAZ;AACAV,0BAAU,IAAV;AACA,oBAAIC,QAAJ,EAAc;AACVP;AACH;AACJ;AACD,gBAAIE,KAAKM,CAAL,EAAQM,SAAR,IAAqB,OAAzB,EAAkC;AAC9B,oBAAIG,IAAIF,EAAEb,KAAKM,CAAL,CAAF,EAAWQ,IAAX,EAAR;AACAX,wBAAQa,KAAKD,CAAL,CAAR;AACAV,2BAAW,IAAX;AACA,oBAAID,OAAJ,EAAa;AACTN;AACH;AACJ;AACJ;AACD,eAAOK,KAAP;AACH,KAjCD,EAiCG,KAjCH,EAiCU,IAjCV,EAiCgB,KAjChB;AAkCAR,SAAKC,QAAL,CAAcC,SAAd,CAAwB,SAASoB,IAAT,CAAclB,GAAd,EAAmB;AACvC,YAAImB,UAAJ;AACA,YAAI;AACA,gBAAIH,IAAIhB,IAAIe,IAAJ,EAAR;AACAI,gBAAIF,KAAKD,CAAL,CAAJ;AACH,SAHD,CAGE,OAAOI,CAAP,EAAU;AACRC,oBAAQC,KAAR,CAAc,IAAIC,KAAJ,CAAU,uBAAV,CAAd;AACAF,oBAAQC,KAAR,CAAcF,CAAd;AACA,mBAAO,IAAP;AACH;AACDpB,YAAIe,IAAJ,CAASI,CAAT;AACA,eAAOA,CAAP;AACH,KAZD,EAYG,MAZH,EAYW,KAZX,EAYkB,KAZlB;AAaAvB,SAAKC,QAAL,CAAcC,SAAd,CAAwB,SAASM,KAAT,CAAeJ,GAAf,EAAoB;AACxCiB,aAAKjB,IAAIe,IAAJ,EAAL;AACA;AACH,KAHD,EAGG,OAHH;AAIH,CApDA,CAoDCS,MAAM5B,IApDP,CAAD","file":"value.js","sourcesContent":["!function (JTML) {\n    JTML.compiler.$compiler(function set(tag) {\n        let tags = tag.children();\n        let tokenName = \"\", value = null;\n        let gotName = false, gotValue = false;\n        let i;\n        function set() {\n            let tokens = tokenName.split(\".\");\n            let tmp = global;\n            for (let i = 0; i < tokens.length - 1; i++) {\n                tmp = tmp[tokens[i]];\n            }\n            tmp[tokens[tokens.length - 1]] = value;\n            gotValue = false;\n            gotName = false;\n        }\n        for (i = 0; i < tags.length; i++) {\n            if (tags[i].localName == \"token\") {\n                tokenName = $(tags[i]).text();\n                gotName = true;\n                if (gotValue) {\n                    set();\n                }\n            }\n            if (tags[i].localName == \"value\") {\n                let t = $(tags[i]).text();\n                value = eval(t);\n                gotValue = true;\n                if (gotName) {\n                    set();\n                }\n            }\n        }\n        return value;\n    }, \"set\", true, false);\n    JTML.compiler.$compiler(function show(tag) {\n        let v;\n        try {\n            let t = tag.text();\n            v = eval(t);\n        } catch (e) {\n            console.error(new Error(\"Show expression error\"));\n            console.error(e);\n            return null;\n        }\n        tag.text(v);\n        return v;\n    }, \"show\", false, false);\n    JTML.compiler.$compiler(function value(tag) {\n        eval(tag.text());\n        // console.log(tag.text());\n    }, \"value\");\n}(sword.JTML);"]}